		MATPLOTLIB

WIDOK WYKRESU (NAZWY ELEMENTÓW (PDF 5 (1 / 13))



STYLE WYKRESÓW I BUDOWA WYKRESÓW
Przekazujemy dwa wektory wartości, najpierw dla wektora x, następnie dla wektora y
dodatkowo przekazywany jest parametr w postaci stringa, który określa styl wykresu

OGÓŁEM:
	https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot
KOLORY:
	https://matplotlib.org/stable/gallery/color/named_colors.html
MARKERY:
	https://matplotlib.org/stable/api/markers_api.html
STYLE:
	https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html
UMIEJSCOWIENIE LEGENDY:
	https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html



	plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro-')
	#tutaj określamy listę parametrów w postaci [xmin, xmax, ymin, ymax]
	plt.axis([0, 6, 0, 20])
	plt.show()


	# możemy też ustawić różne kolory dla poszczególnych elementów nakładając na siebie
	# dwa wykresy
	plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'r')
	plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'o')
	plt.axis([0, 6, 0, 20])
	plt.show()






WYKRESY MOŻNA DODAWAĆ JEDEN PO DRUGIM ALBO W JEDNEJ DEFINICJI

	t = np.arange(0., 5., 0.2)

	plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')

				||

	plt.plot(t, t**2, 'bs')
	plt.plot(t, t**3, 'g^')
	plt.plot(t, t, 'r--')




MATPLOTLIB - WYK1 - 3 LINIOWE ( PLOT )



x = np.linspace(0, 2, 100)
plt.plot(x, x, label="liniowa")
plt.plot(x, x**2, label="kwadratowa")
plt.plot(x, x**3, label="szescienna")
# etykiety osi
plt.xlabel('etykieta x')
plt.ylabel('etykieta y')
# tytul wykresu
plt.title("Prosty wykres")
# legenda
plt.legend()
plt.show()



MATPLOTLIB - WYK2 - PUNKTOWY ( SCATTER )



# Dane w postaci słownika (równie dobrze może to być
# Pandas DataFrame)
data = {'a': np.arange(50),
        'c': np.random.randint(0, 50, 50),
        'd': np.random.randn(50)}
data['b'] = data['a'] + 10 * np.random.randn(50)
data['d'] = np.abs(data['d']) * 100

# Aby w ten sposób przekazać parametry wykresu, należy
# dodać nizbędny parametr data, który zawiera dane
# dostępne poprzez etykiety. Oznacza to, że 'a' jest
# równoważne data['a'] itd.
# Parametr c to skrót od color,
# tutaj przekazywany w formie wektora wartości kolorów
# dla każdej kolejnej wartości wykresu. Parametr s to
# scale - określa rozmiar, w tym przypadku punkt
# dla każdej każdej kolejnej wartości wektora wykresu.

plt.scatter('a', 'b', c='c', s='d', data=data)
plt.xlabel('warotsc a')
plt.ylabel('warotsc b')
plt.show()



MATPLOTLIB - WYK3 - PODWYKRESY ( SUBPLOT )

funkcja 'subplot', przyjmuje 3 argumenty(nrows, ncols, index).
Odpowiednio jest to:
ilość wierszy gridu
ilość kolumn gridu
indeks definiowanego własnie wykresu ( indeksy rozpoczynają się od 1 i kończą na nrows*cols)



x1 = np.arange(0.0, 2.0, 0.02)
x2 = np.arange(0.0, 2.0, 0.02)
y1 = np.sin(2 * np.pi * x1)
y2 = np.cos(2 * np.pi * x2)

# mamy tu do czynienia z gridem 2x1 (2 wiersze, 1 ko-
# lumna) i definiujemy wykres o indeksie 1
plt.subplot(2, 1, 1)
plt.plot(x1, y1, '-')
plt.title('Dwa podwykresy')
plt.ylabel('sin(x)')

# mamy tu do czynienia z gridem 2x1 (2 wiersze, 1 ko-
# lumna) i definiujemy wykres o indeksie 2
plt.subplot(2, 1, 2)
plt.plot(x2, y2, 'r-')
plt.xlabel('x')
plt.ylabel('cos(x)')
plt.show()



MATPLOTLIB - WYK4 - SŁUPKOWY ( BAR )



etykiety = ['Kobiety', 'Mezczyzni']
wartosci = [345, 435]
rozmiar_wykresu = plt.figure(figsize=(6, 7))
plt.bar(etykiety, wartosci)
# mozna zmienic np. kierunek tekstu etykiet slupkow
# plt.xticks(rotation=45)
plt.ylabel('Ilosc narodzin')
plt.xlabel('Plec')
plt.show()



MATPLOTLIB - WYK5 - HISTOGRAM ( HIST )


# bins       - ilość "koszy" czyli slupkow, do ktorych maja wpadac wartosci z wektora x
# facecolor  - kolory slupkow
# alpha      - stopien przezroczystosci wykresu
# density    - czy suma ilosci zostanie znormalizowana do rozkladu prawdopodobienstwa ( czyli przedzial [0, 1])

x = np.random.randn(10000)
plt.hist(x, bins=50, facecolor='g', alpha=0.75, density=True)
plt.xlabel('Wartosci')
plt.ylabel('Prawdopodobienstwo')
plt.title('Histogram')
# wyswietlenie siatki
plt.grid()
plt.show()



MATPLOTLIB - WYK6 - KOŁOWY ( PIE )



# Pierwsza wersja wykresu
zawodnicy = ['Messi', 'Suarez', 'Debele', 'Coutinho']
bramki = [48, 25, 13, 11]
wedges, texts, autotexts = plt.pie(bramki, labels=zawodnicy,
                                   autopct=lambda pct:
"{:.1f}%".format(pct), textprops=dict(color='black'))
plt.setp(autotexts, size=14, weight='bold')
plt.title('Pierwsza wersja wykresu')
plt.legend(title='Zawodnicy')
plt.show()



# Druga wersja wykresu
zawodnicy = ['Messi', 'Suarez', 'Debele', 'Coutinho']
bramki = [48, 25, 13, 11]
def prepare_label (pct, br):
    absolute = int(np.ceil(pct / 100. * np.sum(br)))
    return "{:.1f}% \n({}/{})".format(pct, absolute, sum(bramki))


wedges, texts, autotexts = plt.pie(bramki, labels=zawodnicy,
                                   autopct=lambda pct:
prepare_label(pct, bramki), textprops=dict(color='black'),
radius=1.2, labeldistance=1.02, startangle=70)
plt.setp(autotexts, size=14, weight='bold')
plt.title('Druga wersja wykresu')
plt.legend(title='Zawodnicy', loc='lower left',
           bbox_to_anchor=(-0.2, -0.1))
plt.show()












MATPLOTLIB 3D - WYK1 - LINIOWY



fig = plt.figure()
ax = fig.gca(projection='3d')

t = np.linspace(0, 2 * np.pi, 100)
z = t
x = np.sin(t) * np.cos(t)
y = np.tan(t)
ax.plot(x, y, z, label='Wykres 1')
ax.legend()
plt.show()



MATPLOTLIB 3D - WYK2 - PUNKTOWY



# Stały seed - za każdym razem wygląda tak samo
np.random.seed(19680801)


def randrange(n, vmin, vmax):
    """Funkcja wspomagajaca moze tworzyc macierz
    losowych liczb o ksztalcie (n, )"""
    return (vmax - vmin) * np.random.rand(n) + vmin


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
n = 100

# Dla kazdego zbioru styli i zakresow wygeneruje n losowych
# punktow. Zdefiniowane przez x z [23, 32], y z [0, 100],
# z z [zlow, zhigh].
for c, m, zlow, zhigh in [('r', 'o', -50, -25),
                          ('b', '^', -30, -5)]:
    xs = randrange(n, 23, 32)
    ys = randrange(n, 0, 100)
    zs = randrange(n, zlow, zhigh)
    ax.scatter(xs, ys, zs, c=c, marker=m)

ax.set_xlabel('X label')
ax.set_ylabel('Y label')
ax.set_zlabel('Z label')
plt.show()



MATPLOTLIB 3D - WYK3 - POWIERZCHNIOWY



fig = plt.figure()
ax = fig.gca(projection='3d')
# generuj dane
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)
# rysuj powierzchnie
surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
ax.set_zlim(-1.01, 1.01)
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
# dodanie paska kolorow
fig.colorbar(surf, shrink=0.5, aspect=5)
plt.show()



WIĘCEJ WYKRESÓW 3D - (PDF 6 (4, 5, 6, 7 / 7))



















		PRACE DOMOWE + ROZWIĄZANIA
			LISTA 5
Zadanie 1 
Na wykresie wyświetl wykres liniowy funkcji
f(x) = 1/x dla x ϵ [1, 20].
Dodaj etykietę do linii wykresu i wyświetl legendę.
Dodaj odpowiednie etykiety do osi wykresu (‘x’, ’f(x)’)
oraz ustaw zakres osi na (0, 1) oraz (1, długość wektora x).



	x = np.arange(1, 21, 1)
	plt.plot(x, (1 / x), label="f(x)=1/x")
	plt.axis([1, 20, 0, 1])
	plt.xlabel('x')
	plt.ylabel('f(x)')
	plt.title("Wykres funkcji f(x) = 1/x dla x[1,20]")
	plt.legend()
	plt.show()



ZADANIE 2, 3, 4 REPO + ZAKŁADKA



Zadanie 5 
Korzystając ze zbioru danych Iris wygeneruj wykres punktowy,
gdzie wektor x to wartość ‘sepal length’ a y to ‘sepal width’,
dodaj paletę kolorów c na przykładzie listingu 6 a parametr s
niech będzie wartością absolutną z różnicy wartości poszczególnych elementów wektorów x oraz y. 


	     sepal_length  sepal_width  petal_length  petal_width    species
	0             5.1          3.5           1.4          0.2     setosa
	1             4.9          3.0           1.4          0.2     setosa
	2             4.7          3.2           1.3          0.2     setosa
	3             4.6          3.1           1.5          0.2     setosa
	4             5.0          3.6           1.4          0.2     setosa
	..            ...          ...           ...          ...        ...
	145           6.7          3.0           5.2          2.3  virginica
	146           6.3          2.5           5.0          1.9  virginica
	147           6.5          3.0           5.2          2.0  virginica
	148           6.2          3.4           5.4          2.3  virginica
	149           5.9          3.0           5.1          1.8  virginica



	# przygotowanie wektora kolorow
	colors = np.random.randint(0, 50, len(df.index))
	# przygotowanie wektora z rozmiarami 'kropek' (mnożenie *5 opcjonalne)
	scale = [np.abs(df['sepal_length'] - df['sepal_width']) * 5]
	plt.scatter('sepal_length', 'sepal_width', c=colors, s=scale, data=df)
	plt.xlabel('sepal_length')
	plt.ylabel('sepal_width')
	plt.show()

Zadanie 6 
Korzystając z biblioteki pandas wczytaj zbiór danych z narodzinami dzieci przedstawiony w lekcji 8.
Następnie na jednym płótnie wyświetl 3 wykresy (jeden wiersz i 3 kolumny).
Dodaj do wykresów stosowne etykiety. Poustawiaj różne kolory dla wykresów.

1 wykres – wykres słupkowy przedstawiający ilość narodzonych
	   dziewczynek i chłopców w całym okresie. 
2 wykres – wykres liniowy, gdzie będą dwie linie, jedna dla ilości urodzonych kobiet,
	   druga dla mężczyzn dla każdego roku z osobna. Czyli y to ilość narodzonych
	   kobiet lub mężczyzn (dwie linie), x to rok. 
3 wykres – wykres słupkowy przedstawiający sumę urodzonych dzieci w każdym roku. 



	        Rok      Imie  Liczba Plec
	0      2000     JAKUB   14497    M
	1      2000   MATEUSZ   11454    M
	2      2000    KACPER    8898    M
	3      2000    MICHAŁ    8498    M
	4      2000    PATRYK    7743    M
	...     ...       ...     ...  ...
	16412  2017      TINA       5    K
	16413  2017    VANESA       5    K
	16414  2017  VERONIKA       5    K
	16415  2017     WIERA       5    K
	16416  2017   WIOLETA       5    K




zad6 = pd.ExcelFile('imiona.xlsx')
df = pd.read_excel(zad6, header=0)

# 6.1

plt.subplot(1, 3, 1)
grouped = df.groupby('Plec').agg({'Liczba': ['sum']}).unstack()
grouped.plot.bar(color=['r', 'g'])
plt.title('Wykres 1')
plt.ylabel('Ilosc narodzin')
plt.xlabel('Plec')

# 6.2

# Jesli kazdy rok ma byc widoczny na wykresie:
# df['Rok'] = df['Rok'].astype(str)
plt.subplot(1, 3, 2)
x = df['Rok'].unique()
kobiety = df[(df.Plec == 'K')].groupby('Rok').agg({'Liczba': ['sum']}).values
mezczyzni = df[(df.Plec == 'M')].groupby('Rok').agg({'Liczba': ['sum']}).values
plt.plot(x, kobiety, 'pink', label="Dziewczynki")
plt.plot(x, mezczyzni, 'yellow', label="Mezczyzni")
plt.title('Wykres 2')
plt.ylabel('Ilosc narodzin w danym roku')
plt.xlabel('Rok')

# 6.3

# bez funkcji flatten matplotlib wyrzuca wyjatek,
# ktory informuje nas, ze nie mozna przekazywac parametru
# jako tablicy wielowymiarowej, a w takiej postaci w tym przypadku
# zwracany jest wektor y, korzystamy wiec z flatten(),

suma_dz_rok = df.groupby(['Rok']).agg({'Liczba': ['sum']}).values.flatten()
# print(suma_dz_rok)
# x = df['Rok'].unique()

plt.subplot(1, 3, 3)
plt.bar(x, suma_dz_rok)
plt.title('Wykres 3')
plt.ylabel('Laczna ilosc narodzin w danym roku')
plt.xlabel('Rok')

plt.show()



Zadanie 7 
Korzystając z pliku zamówienia.csv policz sumy zamówień dla każdego sprzedawcy
i wyświetl wykres kołowy z procentowym udziałem każdego sprzedawcy w ogólnej sumie zamówień.
Poszukaj w Internecie jak dodać cień do takiego wykresu i jak działa atrybut ‘explode’
tego wykresu. Przetestuj ten atrybut na wykresie. 



	       Kraj Sprzedawca Data zamowienia  idZamowienia    Utarg
	0    Polska   Kowalski      2003-07-16         10248   440.00
	1    Polska   Sowiński      2003-07-10         10249  1863.40
	2    Niemcy    Peacock      2003-07-12         10250  1552.60
	3    Niemcy  Leverling      2003-07-15         10251   654.06
	4    Niemcy    Peacock      2003-07-11         10252  3597.90
	..      ...        ...             ...           ...      ...
	794  Polska       King      2005-04-30         11048   525.00
	795  Niemcy  Leverling      2005-05-01         11052  1332.00
	796  Niemcy     Fuller      2005-04-29         11053  3055.00
	797  Niemcy   Callahan      2005-05-01         11056  3740.00
	798  Niemcy  Leverling      2005-05-01         11057    45.00



df = pd.read_csv('zamowienia.csv', sep=';')

# liczenie ilosci zamowien dla kazdego sprzedawcy
grouped_df = df.groupby(['Sprzedawca']).agg({'idZamowienia': "nunique"})
grouped_df = grouped_df.reset_index()
sprzedawcy = grouped_df['Sprzedawca']
zamowienia = grouped_df['idZamowienia']
# Explode "odsuwa" fragment wykresu
# Explode mozna zrobic na rozne sposoby
# Najprosciej jest zrobic wektor (musi mieć rozmiar, jak wektor y)

explode = (0, 0.3, 0, 0, 0, 0, 0.2, 0.1, 0)
# Mozna tez posluzyc sie forem, dla kazdego x, a dopiero potem
# okreslic, ktore fragmenty zostana wysuniete i  o ile

# explode = [0.0 for n in range(len(sprzedawcy.index))]
# explode[np.random.randint(0, len(sprzedawcy.index))] = 0.2

wedges, texts, autotexts = plt.pie(zamowienia, labels=sprzedawcy, autopct=lambda pct:
                                   "{:.1f}%".format(pct), shadow=True, explode=explode, textprops=dict(color="black"))
plt.setp(autotexts, size=11, weight="bold")
plt.title("Procentowy udzial kazdego sprzedawcy")
plt.show()

# liczenie sum utargow dla kazdego sprzedawcy
policzone = df.groupby('Sprzedawca')['Utarg'].sum()
# explode
explode = [0.0 for n in range(len(policzone.index))]
explode[np.random.randint(0, len(policzone.index))] = 0.2
policzone.plot.pie(subplots=True, autopct='%.2f %%', fontsize=8, explode=explode, shadow=True)
plt.title("Procentowy udzial kwot zamowien sprzedawcow")
plt.show()












			LISTA 6
Zadanie 1 
Wygeneruj wykres liniowy dla z od 0 do 2pi, x = sin(z), y = 2cos(z).



fig = plt.figure()
ax = fig.gca(projection='3d')

t = np.linspace(0, 2 * np.pi, 100)
z = t
x = np.sin(t)
y = 2 * np.cos(t)
ax.plot(x, y, z, label='Zadanie 1')
ax.legend()
plt.show()



Zadanie 2 
Wygeneruj wykres punktowy dla 5 różnych losowych serii
z użyciem różnych znaczników i kolorów: 	https://matplotlib.org/api/markers_api.html   



# Stały seed - za każdym razem wygląda tak samo
np.random.seed(19680801)


def randrange(n, vmin, vmax):
    """Funkcja wspomagajaca moze tworzyc macierz
    losowych liczb o ksztalcie (n, )"""
    return (vmax - vmin) * np.random.rand(n) + vmin


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
n = 100

# Dla kazdego zbioru styli i zakresow wygeneruje n losowych
# punktow. Zdefiniowane przez x z [23, 32], y z [0, 100],
# z z [zlow, zhigh].
for c, m, zlow, zhigh in [('red', 's', -10, 0),
                          ('green', 'P', -20, -10),
                          ('black', '+', -30, -20),
                          ('blue', '.', -40, -30),
                          ('yellow', '4', -50, -40)]:
    xs = randrange(n, 0, 40)
    ys = randrange(n, 0, 40)
    zs = randrange(n, zlow, zhigh)
    ax.scatter(xs, ys, zs, c=c, marker=m)

ax.set_xlabel('X label')
ax.set_ylabel('Y label')
ax.set_zlabel('Z label')
plt.show()



Zadanie 3 
Wygeneruj wykres z przykładu 3 w 5 różnych kolorystkach: https://matplotlib.org/examples/color/colormaps_reference.html  



fig = plt.figure(figsize=(16, 9))
# generuj dane
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)
# rysuj powierzchnie 1
ax = fig.add_subplot(2, 3, 1, projection='3d')
surf = ax.plot_surface(X, Y, Z, cmap=cm.hot,
                       linewidth=1, antialiased=False)
ax.set_zlim(-1.01, 1.01)
fig.colorbar(surf, shrink=0.5, aspect=10, orientation='vertical',
             pad=0.1)
# rysuj powierzchnie 2
ax = fig.add_subplot(2, 3, 2, projection='3d')
surf1 = ax.plot_surface(X, Y, Z, cmap=cm.Pastel1,
                        linewidth=1, antialiased=False)
ax.set_zlim(-1.01, 1.01)
fig.colorbar(surf1, shrink=0.5, aspect=10, orientation='vertical',
             pad=0.1)
# rysuj powierzchnie 3
ax = fig.add_subplot(2, 3, 3, projection='3d')
surf2 = ax.plot_surface(X, Y, Z, cmap=cm.ocean,
                        linewidth=1, antialiased=False)
ax.set_zlim(-1.01, 1.01)
fig.colorbar(surf2, shrink=0.5, aspect=10, orientation='vertical',
             pad=0.1)
# rysuj powierzchnie 4
ax = fig.add_subplot(2, 3, 4, projection='3d')
surf3 = ax.plot_surface(X, Y, Z, cmap=cm.Spectral,
                        linewidth=1, antialiased=False)
ax.set_zlim(-1.01, 1.01)
fig.colorbar(surf3, shrink=0.5, aspect=10, orientation='vertical',
             pad=0.1)
# rysuj powierzchnie 5
ax = fig.add_subplot(2, 3, 5, projection='3d')
surf4 = ax.plot_surface(X, Y, Z, cmap=cm.PiYG,
                        linewidth=1, antialiased=False)
ax.set_zlim(-1.01, 1.01)
fig.colorbar(surf4, shrink=0.5, aspect=10, orientation='vertical',
             pad=0.1)


ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))

# zapis PNG
plt.savefig('zad3.png')
plt.show()



Zadanie 4 
Wygeneruj z pomocą dokumentacji wykres słupkowy z przykładu 4
wykorzystując 5 różnych kombinacji wyglądu. 



# konfiguracja wielkosci wykresu:
# figsize okresla wielkosc wykresu w calach
fig = plt.figure(figsize=(11, 4))
ax1 = fig.add_subplot(151, projection='3d')
ax2 = fig.add_subplot(152, projection='3d')
ax3 = fig.add_subplot(153, projection='3d')
ax4 = fig.add_subplot(154, projection='3d')
ax5 = fig.add_subplot(155, projection='3d')
# dane
_x = np.arange(4)
_y = np.arange(5)
_xx, _yy = np.meshgrid(_x, _y)
x, y = _xx.ravel(), _yy.ravel()
top = x + y
bottom = np.zeros_like(top)
width = depth = 1
colors = ['r', 'g', 'b', 'm', 'c', 'y']
ls = LightSource(azdeg=225.0, altdeg=45.0)
ax1.bar3d(x, y, bottom, width, depth, top, color='red', shade=True)
ax1.set_title('Wykres 1')
ax2.bar3d(x, y, bottom, width, depth, top, color='green', shade=False)
ax2.set_title('Wykres 2')
ax3.bar3d(x, y, bottom, width, depth, top, color='orange', shade=True, lightsource=ls)
ax3.set_title('Wykres 3')
ax4.bar3d(x, y, bottom, width, depth, top, shade=False)
ax4.set_title('Wykres 4')
for i in range(6):
    ax5.bar3d(x, y, bottom, width, depth, top, color=colors[i], alpha=0.1)
ax5.set_title('Wykres 5')
plt.show()



Zadanie 5 
W przykładzie 3 zmień gęstość próbek do wykresu na krok 0.1
oraz włącz antyaliasing. Wyświetl pierwotny i nowy wykres obok siebie. 



fig = plt.figure(figsize=(16, 9))
ax1 = fig.add_subplot(121, projection='3d')
# generuj dane wykresu 1
X1 = np.arange(-5, 5, 0.25)
Y1 = np.arange(-5, 5, 0.25)
X1, Y1 = np.meshgrid(X1, Y1)
R1 = np.sqrt(X1**2 + Y1**2)
Z1 = np.sin(R1)
# rysuj powierzchnie wykresu 1
surface1 = ax1.plot_surface(X1, Y1, Z1, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
ax1.set_zlim(-1.01, 1.01)
ax1.zaxis.set_major_locator(LinearLocator(10))
ax1.zaxis.set_major_formatter(FormatStrFormatter('%.2f'))
fig.colorbar(surface1, shrink=0.5, aspect=5)
ax1.set_title('Wykres pierwotny')

ax2 = fig.add_subplot(122, projection='3d')
# generuj dane wykresu 2
X2 = np.arange(-5, 5, 0.1)
Y2 = np.arange(-5, 5, 0.1)
X2, Y2 = np.meshgrid(X2, Y2)
R2 = np.sqrt(X2**2 + Y2**2)
Z2 = np.sin(R2)
# rysuj powierzchnie wykresu 2
surface2 = ax2.plot_surface(X2, Y2, Z2, cmap=cm.coolwarm,
                       linewidth=0, antialiased=True)
ax1.set_zlim(-1.01, 1.01)
ax1.zaxis.set_major_locator(LinearLocator(10))
ax1.zaxis.set_major_formatter(FormatStrFormatter('%.2f'))
fig.colorbar(surface2, shrink=0.5, aspect=5)
ax1.set_title('Wykres nowy')
plt.savefig('wykres5.png')
plt.show()



